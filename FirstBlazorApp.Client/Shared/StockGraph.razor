@using Telerik.Blazor
@using Telerik.Blazor.Components.Chart
@using FirstBlazorApp.Shared;
@using Microsoft.Extensions.Configuration;
@using System.Threading;
@implements IDisposable;
@inject HttpClient HttpClient;
@inject ClientState ClientState;
@inject RandomValuesProvider RandomProvider;
@inject IConfiguration  Configuration;

<div class="stock-graph">
    <p>
        @companyData?.companyName
    </p>
    <div>
        <TelerikButton class="delete-item" onclick="@OnRemoved">X</TelerikButton>
    </div>
    <TelerikChart ref="@chart">
        <TelerikChartSeriesItems>
            <TelerikChartSeries Type="ChartSeriesType.Line" Data="@StockValues.StockValues"
                                Field="@nameof(StockValueData.StockValue)"
                                CategoryField="@nameof(StockValueData.Date)">
            </TelerikChartSeries>
        </TelerikChartSeriesItems>
        <TelerikChartValueAxes>
            <TelerikChartValueAxis Color="red"></TelerikChartValueAxis>
        </TelerikChartValueAxes>
    </TelerikChart>
</div>

@functions {

    [Parameter] string SymbolToDisplay { get; set; }
    [Parameter] EventCallback OnRemoved { get; set; }

    CompanyData companyData;

    TelerikChart chart;
    CancellationTokenSource pollingCancellationToken;
    GraphStockValues StockValues;
    StockDataProvider StockDataProvider;

    protected override async Task OnParametersSetAsync()
    {
        StockDataProvider = new StockDataProvider(SymbolToDisplay, Configuration);
        StockValues = ClientState.GetStockValues(SymbolToDisplay);
        StateHasChanged();
        pollingCancellationToken?.Cancel();
        pollingCancellationToken = new CancellationTokenSource();

        var companyDataUrl = Configuration["companyDataUrl"];

        try
        {
            companyData = await HttpClient.GetJsonAsync<CompanyData>(companyDataUrl);
        }
        catch (Exception e)
        {
            pollingCancellationToken.Cancel();
            Console.WriteLine(e);
        }

        await PollStockDataAsync();
    }

    void IDisposable.Dispose()
    {
        pollingCancellationToken?.Cancel();
    }

    private async Task PollStockDataAsync()
    {
        pollingCancellationToken = new CancellationTokenSource();


        while (!pollingCancellationToken.IsCancellationRequested)
        {
            try
            {
                var stockData = await StockDataProvider.GetNewValue(pollingCancellationToken.Token);
                //var value = await HttpClient.GetJsonAsync<double>(url);
                StockValues.AddNewValue(stockData);

                StateHasChanged();
            }
            catch (Exception e)
            {
                pollingCancellationToken.Cancel();
                Console.Error.WriteLine(e);
            }


            await Task.Delay(2000);
        }

    }

    private async void onDelete()
    {
        pollingCancellationToken?.Cancel();
        await OnRemoved.InvokeAsync(SymbolToDisplay);
    }
}